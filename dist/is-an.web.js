;(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    define([], factory);
  } else {
    root.isAn = factory();
  }
}(this, function () {
var isAn, literal, setTypeNames, toString,
  hasProp = {}.hasOwnProperty;

toString = function(x) {
  return {}.toString.call(x);
};

literal = function(x) {
  return typeof x !== 'object';
};

isAn = function(x, type) {
  var func, i, len, name, options, ref, subTypeName;
  if (type != null) {
    if (isAn.Object(type)) {
      options = type;
      type = x;
    }
    func = isAn[type];
    if (func == null) {
      func = isAn;
      ref = type.split('.');
      for (i = 0, len = ref.length; i < len; i++) {
        subTypeName = ref[i];
        func = func[subTypeName];
        if (func == null) {
          return void 0;
        }
      }
    }
    if (options != null ? options.returnChecker : void 0) {
      return func;
    } else {
      return func(x);
    }
  } else {
    name = toString(x).slice('[object '.length, -1);
    if ((isAn[name] != null) && isAn.Function(isAn[name]) && isAn[name](x)) {
      return name;
    }
    for (type in isAn) {
      if (!hasProp.call(isAn, type)) continue;
      func = isAn[type];
      if (isAn.Function(isAn[name]) && func(x)) {
        return type;
      }
    }
  }
};

isAn.Undefined = function(x) {
  return toString(x) === '[object Undefined]';
};

isAn.Null = function(x) {
  return toString(x) === '[object Null]';
};

isAn.Boolean = function(x) {
  return toString(x) === '[object Boolean]';
};

isAn.Boolean.Literal = function(x) {
  return isAn.Boolean(x) && literal(x);
};

isAn.Boolean.Object = function(x) {
  return isAn.Boolean(x) && !literal(x);
};

isAn.Number = function(x) {
  return toString(x) === '[object Number]';
};

isAn.Number.Literal = function(x) {
  return isAn.Number(x) && literal(x);
};

isAn.Number.Object = function(x) {
  return isAn.Number(x) && !literal(x);
};

isAn.Number.NaN = function(x) {
  return isAn.Number(x) && isNaN(x);
};

isAn.Number.Finite = function(x) {
  return isAn.Number(x) && isFinite(x);
};

isAn.Number.Infinite = function(x) {
  return isAn.Number(x) && (Number(x) === Infinity || Number(x) === -Infinity);
};

isAn.Number.Integer = function(x) {
  return isAn.Number.Finite(x) && Math.floor(x) === Number(x);
};

isAn.Number.Literal.NaN = function(x) {
  return isAn.Number.NaN(x) && literal(x);
};

isAn.Number.Literal.Finite = function(x) {
  return isAn.Number.Finite(x) && literal(x);
};

isAn.Number.Literal.Infinite = function(x) {
  return x === Infinity || x === -Infinity;
};

isAn.Number.Literal.Integer = function(x) {
  return isAn.Number.Finite(x) && Math.floor(x) === x;
};

isAn.Number.Object.NaN = function(x) {
  return isAn.Number.NaN(x) && !literal(x);
};

isAn.Number.Object.Finite = function(x) {
  return isAn.Number.Finite(x) && !literal(x);
};

isAn.Number.Object.Infinite = function(x) {
  return isAn.Number.Object(x) && (Number(x) === Infinity || Number(x) === -Infinity);
};

isAn.Number.Object.Integer = function(x) {
  return isAn.Number.Object.Finite(x) && Math.floor(x) === Number(x);
};

isAn.String = function(x) {
  return toString(x) === '[object String]';
};

isAn.String.Literal = function(x) {
  return isAn.String(x) && literal(x);
};

isAn.String.Object = function(x) {
  return isAn.String(x) && !literal(x);
};

isAn.Array = Array.isArray != null ? Array.isArray : function(x) {
  return toString(x) === '[object Array]';
};

isAn.Object = function(x) {
  return toString(x) === '[object Object]';
};

isAn.Object.Literal = function(x) {
  return toString(x) === '[object Object]' && x.constructor === {}.constructor;
};

isAn.Function = function(x) {
  return toString(x) === '[object Function]';
};

isAn.Arguments = function(x) {
  return toString(x) === '[object Arguments]';
};

isAn.Date = function(x) {
  return toString(x) === '[object Date]';
};

isAn.RegExp = function(x) {
  return toString(x) === '[object RegExp]';
};

isAn.Error = function(x) {
  return toString(x) === '[object Error]';
};

isAn.Math = function(x) {
  return toString(x) === '[object Math]';
};

isAn.Int8Array = function(x) {
  return toString(x) === '[object Int8Array]';
};

isAn.Uint8ClampedArray = function(x) {
  return toString(x) === '[object Uint8ClampedArray]';
};

isAn.Uint8Array = function(x) {
  return toString(x) === '[object Uint8Array]';
};

isAn.Int16Array = function(x) {
  return toString(x) === '[object Int16Array]';
};

isAn.Uint16Array = function(x) {
  return toString(x) === '[object Uint16Array]';
};

isAn.Int32Array = function(x) {
  return toString(x) === '[object Int32Array]';
};

isAn.Uint32Array = function(x) {
  return toString(x) === '[object Uint32Array]';
};

isAn.Float32Array = function(x) {
  return toString(x) === '[object Float32Array]';
};

isAn.Float64Array = function(x) {
  return toString(x) === '[object Float64Array]';
};

setTypeNames = function(func, name) {
  var results, subFunc, subName, typeName;
  results = [];
  for (typeName in func) {
    if (!hasProp.call(func, typeName)) continue;
    subFunc = func[typeName];
    if (isAn.Function(subFunc)) {
      subName = name + typeName;
      subFunc.typeName = subName;
      results.push(setTypeNames(subFunc, subName + '.'));
    } else {
      results.push(void 0);
    }
  }
  return results;
};

setTypeNames(isAn, '');

return isAn;
}));

//# sourceMappingURL=data:application/json;base64,
